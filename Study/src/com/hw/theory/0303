
	<< 20.03.03 화요일 >>
	
**** 예외처리
	
	1) 프로그램 오류
		- 컴파일에러 - 컴파일할 때 발생하는 에러
		- 런타임에러 - 실행할 때 발생하는 에러
		
		-java의 런타임 에러 ( 에러 error / 예외 exception )
	
	2) 예외처리의 정의와 목적
		- 에러(error)는 어쩔 수 없지만, 예외(exception)는 처리해야 한다.
	3) 예외처리구문 - try-catch
		- 예외를 처리하려면 try-catch 를 사용해야한다.
		try{
			(예외가 발생할 가능성이 있는 문장들을 넣는다.)
		}catch (Exception1 e1){
			Exception1이 발생할 경우, 이를 처리하기 위한 문장을 적는다.
		}catch (Exception2 e2){
			Exception2이 발생할 경우, 이를 처리하기 위한 문장을 적는다.
		}
		
		----> if-else문처럼 사용
		
	사용하는 경우 :
		- DB랑 통신할때
		- 외부 입출력할때
		- 서버랑 통신할때
		
	5) 예외 발생시키기
		1. 예외클래스 객체선언
		Exception e = new Exception("고의로 발생시켰음");
		
		2. 키워드 throw를 이용해서 예외발생
		throw e;
	
	6) 예외 클래스의 계층구조
		** try- catch 꼭 ! 써야한다.
		---	Exception 클래스들 - 사용자의 실수와 같은 외적인 요인에 의해서 발생
				1- IOEception
				2- CalssNotFoundException
			 	3- RuntimeException -클래스들 - 프로그래머의 실수로 발생하는 예외(try- catch 안써도 된다)
			 		-	ArithmeticException
					-	CalssCasException
					-	...
					-	IndexOutOfBoundsException
	
	7) 예외의 발생과 catch블럭
		* 예외의 최고조상  Exception
		모든 예외는  Exception이 포함한다 (catch가 여러개 일 경우 맨 아래에 해줘야한다. 맨 위에서 걸려서)
	
		printStackTrace() - 예외발생 당시의 메서드 정보와 예외 메세지를 화면에 출력
		getMessage()  - 예외클래스의 인스턴스에 저장된 메세지를 얻을 수 있다.
		
	8) finally 블럭
		무조건 도는 걸 말한다.
		예외의 발생여부와 관계없이 실행디어야 하는 코드를 넣는다.
		
		
	9) 메서드에 예외 선언하기
		- 예외를 처리하는 또 다른 방법
		- 호출한 메서드로 전달해주는 것
		- 호출한 메서드에서 예외처리를 해야만 할 때 사용
		void method() throws Exception {	} --> 이렇게 사용
	****
	