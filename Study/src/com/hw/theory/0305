

	1)  Calendar(추상클래스)와 Date(객체. 걍클래스)
	
		Date가 먼저 나온뒤, 오류 수정+기능추가로 만들어진 것이 Calendar
		
		Calendar cal = Calendar.getInstance(); //calendar는 추상클래스여서 메소드를 불러서 사용해야한다.
		날짜를 계산하기 위해서 getTimeInMillis() / 초로 반환 / --> 를 사용하여 변환 후 계산한다. 
		
	
	2) 컬렉션 프레임웍 (collections framework)
		
		. 컬렉션(collection)
			- 여러객체(데이터)를 모아 놓은 것을 의미
		. 프레임웍(framework)
			- 표준화, 정형화된 체계적인 프로그래밍방식 (어떠한 기능들을 모아둔 것) -스프링
		. 컬렉션 프레임웍(collections framework)
			- 컬렉션(다수의 객체)를 다루기 위한 표준화된 프로그래밍 방식
			- 컬렉션을 쉬고 편ㄹ하게 다룰 수 있는 다양한 클래스를 제공
			- java.util패키지에 포함 jdk1.2부터
		. 컬렉션 클래스(collection class)
			- 다수의 데이터를 저장할 수 있는 클래스(예, Vector, ArrayList, HashSet)
		
		-----------------------------------------------------------------------
		
		* 컬렉션 프레임웍의 핵심 인터페이스
			** Collection(인터페이스)
				- List(인터페이스)
					 순서가 있는 데이터의 집합, 데이터의 중복을 허용한다. ex)대기자명단
					 구현 클래스 : ArrayList, LinkedList, Stack, Vector 등..
				- Set(인터페이스)
					순서를 유지하지 않는 데이터의 집합. 데이터의 중복을 허용하지 않는다.  ex) 양의 정수집합, 소수의 집합
					구현 클래스 : HashSet, TreeSet 등 ..
			
			** Map(인터페이스)
					키(key)와 값(value)의 쌍(pair)으로 이루어진 데이터의 집합
					순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다. ex) 우편번호, 지역번호(전화번호)
					구현 클래스 : HashMap, TreeMap, Hashtable, Properties 등
		
		-------------------------------------------------------------------------
		
		* Collection인터페이스 메서드
			add	 : 객체추가
			clear : 모든 객체 삭제
			contains : 객체를 찾아준다 boolean
			isEmpty : 비어있는지 학인
			remove : 객체삭제
			size : 저장된 개수	
		
		* List 인터페이스 메서드
			indexOf : 지정된 객체의 위치반환
			get(index) : 지정된위치의 개체반환
			remove : 지정된 인덱스 객체 삭제
			set(index) : 지정된 위치에 저장
			sort : 정렬

		* set 인터페이스 메서드
			List와 거의 비슷
			addAll(collection c)
			containsAll(collection c)
			removeAll(collection c)
			retainAll(collection c)
			lterator() 모든 데이터를 저장 시켜놓고 순서대로 하나하나빼와서 출력을 시킨다.
			(다음 데이터가있으면 읽어옴 지정된위치의 데이터를 가져올순없다.)
		
		* Map 인터페이스 메서드 (보통 id,pw)
			put(Object key,Object value) : 객체추가  (키벨류 연결해서 저장)
			get(Object key) : key값을 넣으면 value출력
			containsKey(Object key) : 입력한 key값이 있는지 boolean 반환
				
				
		* ArrayList 삭제방법
			뒤에서부터 지워야한다.
			- 앞에서부터 지우면 뒤에 데이터를 땡겨와서 남게된다.
			전체삭제할때 clear를 사용하자
			
			
		* Iterator
			컬렉션에 저장된 데이터를 접근하는데 사용되는 인터페이스(set, map에만 사용)
			boolean hasNext() - 읽어올 요소가 남아있는지 확인한다.
			Object next() - 다음 요소들을 읽어온다( 사용전에 hasNext실행 후 사용 **읽을요소 없음 에러)
			remove
			
			- Collection의 메소드여서 map에서 사용하려면
			Iterator list = map.entrySet().iterator(); 으로 사용
			**entrySet() map을 set으로 바꿔준다,(Collection 어쩌구인터페이스 상속을 위해)
			
			
		* Comparator 와  Comparable
			-Comparator 기본 정렬기준을 구현하는데 사용
			-Comparable 다른 기준으로 정렬
					