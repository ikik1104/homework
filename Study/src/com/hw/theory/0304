
	<< 20.03.04 >>
	1) Object 클래스의 메서드
		총 11개의 메서드만 가진다 (변수 없음)
		
		1. (protected) clone - 객체자신을 복제해서 새로운 객체를 생성하는 메서드
						- Colneable 인터페이스를 구현한 클래스의 인스터스만 복제할수있다.
		2. equals
			- String 객체 이외에 객체비교시 equals() 오버라이딩해서 메소드로 사용해야한다.
			 	-> ex)Data 객체끼리 비교할때 if(d1.equals(d2))하면 무조건 false. 메소드 오버라이딩으로
			 	public boolean equals(Object obj){
			 		if(obj != null && obj instanceof 다른객체)
			 		형변환해서 사용함
			 	}
		3. (protected) finalize 객체가 사라질때 단 한번 실행된다.
		4. getClass 인스턴스를 반환한다( 객체를 선언하는 것과 같다. ) -> 정보가 있다 없다 확인가능
			- 자신이 속한 클래스의 Class객체를 반환하는 메서드
			ex) Card c = new Card();
				Class cObj = c.getClass();
				
				Class cObj = Card.class;
				String className = cObj.getName();
				
				등등등...
				
		5. hashCode 엄청 대량인 객체를 비교할 때
			-객체의 해시코드(int 타입 정수)를 반환하는 메서드 (해시함수) 내부 주소를 반환핟.
		6. toString 객체를 문자로 보여주는것 ( 객체를 프린트하면 해당 메소드 내용을 출력 )
		7. notify
		8. notifyAll
		9. wait
		10. wait(long timeout )
		11. wait(long timeout, int nanos)
		
	2) String 클래스
		1-  String 인스턴스의 내용을 바꿀 수 없다.
			ex) String a = "a";
				String b = "b";
				String a = a+b; -> 새로운 주소를 만듬 (계속 이렇게 쓰면 메모리를 많이 차지함.)
				
				String s1 = "abc";
				String s2 = "abc";  
				--> "abc" 라는 같은 곳을 바라보기 때문에 == 으로 하면 같게 나온다.
				
				new String 으로 하면 equals로 비교해야한다. 
				**그냥 무조건 equals를 사용하자!
				
		2-	빈 문자열
			String은 빈 공백 "" 가능하다 -> 초기화에 사용한다.(변수를 만들고 똑같은 공간을 바라본다. 메모리 사용량이 줄어든다)
			--char는 공백을 못넣음 ' ' 스페이스로 공백
			
			
			
	3) StringBuffer클래스
		1-	String이랑 거의 똑같지만,
			String은 호출할때마다 새로운 공간에 저장하고,
			StringBuffer는 지정한 장소에 저장할 수 있다.
			
		2-	저장공간이 정해져있다.(특정한 길이 이상은 사용할 수 없다.)
		
		
	4) Math클래스
		1-	abs - 절대값을 반환한다. (날짜 계산할 때 날짜끼리빼면 시간계산을 할 수 있다.)
			ceil - 올림하여 반환
			floor - 버림하여 반환
			round - 첫째자리에서 반올림
			random - 랜덤한 수
		 	rint -	double을 가까운 정수형으로 바꿔줌 (올림, 내림)
		
		
		2-	wrapper클래스
			8가지의 기본형을 객체로 정의한것, (int- Integer, char-characer...나머지는 첫글자 대문자)
			비교할때도 string객체 처럼 equals 오버라이딩해서 사용.		
	
	
	
	