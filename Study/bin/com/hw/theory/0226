	
	<< 20.02.26 >>
	
	***상속, 오버라이딩, package와 import
	
	1) Object클래스 -> 최고 조상

 	- extends를 안한 클래스는 자동으로 Object클래스를 상속받는다.
  	-> Object를 상속받은 클래스를 상속받은 하위 클래스는 자동으로 Object클래스를 상속받는다.
   	( 모든 클래스는 Object를 상속받는다.) -> *** 모든 클래스의 주소값을 받을 수 있다.****
  	toString(), equals(Object obj), hashCode(),.... 11개의 메소드가 존재한다.
  
	
	2) 오버라이딩 (덮어쓰다)
	
	상속받은 메서드의 내용을 상속받은 클래스에 맞게 변경하는 것 (다시 한번 재 정의)
	똑같은 메소드를 계속 사용할 수 있게 해준다. 같은 메소드인데 내용만 다른 것 .
	조건 ) *이름, *매개변수, *리턴타입 다 동일해야한다.
	접근제한자 (private, public,protected ...)를 좁은 범위로 변경할 수 가 없다.
	조상클래스의 메서드보다 많은 수의 예외처리를 선언할 수 없다.
	
	
	3)super
	
	this와 같으나 조상의 멤버에 있는 것을 참조 / 메서드도 가능
	this 자신을 가리키는 참조변수- 1) 인스턴스변수   2)다른 생성자 의 2형태 사용가능
	
	4)패키지 ( = 폴더)
	- 서로 관련된 클래스와 인터페이스의 묶음
	- 서브패키지를 가질 수 있으며, '.'으로 구분한다. -> com.javalex.ex
	public 이 붙어있고 main메소드를 가진 클래스 명과 파일명이 동일해야한다
	
	클래스패스 - 클래스 파일을 찾아주는 경로
	
	5) import문
	java.util.*, java.lang.*...  은 모든클래스를 개별적import가 아닌 다 사용할 수 있도록 하는 것
	
	
	-------------------------------------------------------------------------------------------------------------------------
	*** 제어자, 다형성
	
	
	1) 제어자
	- 클래스, 변수, 메서드의 선언부에 사용
	하나에 대상에 여러 개의 제어자를 조합해서 사용가능 하나, 접근 제어자는 단 하나만. 그 외 제어자는 2가지 가능
	
	접근 제어자  - public(전부 사용), protected(같은 패키지 내 / 다른패키지에서 상속받는 클래스까지 가능), default(같은 패키지 내에서만 사용)-, private(같은 클래스에서만 사용 가능) 
			- 접근 제어자를 사용하지 않으면 기본적으로 default 생성
			- class에서는 public과 default(아무것도 안적음)만 가능
			
	그 외 -	static(구동이 되는 즉시 실행)
			final(변경될 수 없는 클래스,변수(상수),메서드(오버라이딩을 사용하여 재정의 안된다) 처음의 값만 넣어줄 수 있다.
			abstract (추상의/미완성의 ) 추상메소드를 가지고 있는 클래스는 abstract을 사용해 추상클래스로 만들어야한다. (메소드가 구현이 다 안된것들 - 추상메소드) / 미완성이라 객체선언이 불가능하다. 상속만가능
			native(다른언어?)
		 	transient
			synchronized
			volatile
			strictfp
			
	** 한 class파일안에 클래스에는 하나의 접근 제어자밖에 사용을 못한다. (클래스에 접근제어자를 쓰려면 다른 클래스파일로 빼내서 사용해야한다.)
		  
	캡슐화 - 메소드를 거쳐서 주고 받을 수 있도록 하는 것.
		 - 외부로부터 데이터를 보호하기 위해서
		 
	singleton - 일반적으로 생성자의 접근제어자는 클래스의 접근 제어자와 일치한다.
			  - 생성자에 접근 제어자를 사용함으로써 인스턴스 생성을 제한할 수 있다.
			private static singleton s = new singleton();
				(객체를 한번만 뽑을 수 있게해서 같이 사용하게)
			  - 메소드를 통해 접근해야함
			  
	** static과 abstract를 함께 사용할 수 없다 - static은 구동 되자마자 올라가는데 abstract는 미완성이기때문에
	